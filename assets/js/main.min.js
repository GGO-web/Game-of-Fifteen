"use strict";

var gameField = document.getElementById("game-field"),
    countCells = gameField.dataset.countcells,
    countRows = +Math.sqrt(countCells);
var emptyCellIndex = +countCells;

var createCells = function createCells() {
  for (var _e = 1; _e < countCells; ++_e) {
    var t = document.createElement("li");
    t.classList.add("game-field__cell"), t.dataset.index = _e, t.innerHTML = _e, gameField.appendChild(t);
  }

  var e = document.createElement("li");
  e.classList.add("game-field__cell"), e.dataset.index = countCells, gameField.appendChild(e);
},
    switchStates = function switchStates(e, t) {
  var l = gameField.querySelector(".game-field__cell:nth-child(".concat(e, ")")),
      n = gameField.querySelector(".game-field__cell:nth-child(".concat(t, ")")),
      c = l.innerHTML,
      s = n.innerHTML;
  l.innerHTML = s, n.innerHTML = c;
},
    isAdjacentCell = function isAdjacentCell(e) {
  var t = !0,
      l = !0,
      n = !0,
      c = !0;
  return e % countRows == 1 && (n = !1), e % countRows == 0 && (c = !1), e / countRows <= 1 && (t = !1), e / countRows > countRows - 1 && (l = !1), !(!n || emptyCellIndex !== e - 1) || !(!c || emptyCellIndex !== e + 1) || !(!t || emptyCellIndex !== e - countRows) || !(!l || emptyCellIndex !== e + countRows);
};

createCells(), gameField.addEventListener("click", function (e) {
  var t = e.target,
      l = t.innerHTML;

  if (t.classList.contains("game-field__cell") && "" != l) {
    var _e2 = +t.dataset.index;

    isAdjacentCell(_e2) && (switchStates(_e2, emptyCellIndex), emptyCellIndex = _e2);
  }
});