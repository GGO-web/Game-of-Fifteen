"use strict";

var gameField = document.getElementById("game-field"),
    gameFieldSizeWrapper = document.querySelector(".game-field-size-wrapper"),
    gameFieldSizeButtons = document.querySelectorAll(".game-field-size__button"),
    countMoves = document.getElementById("count-moves"),
    gameRestart = document.getElementById("game-restart"),
    gameMenu = document.getElementById("game-menu"),
    gameWinModalWrapper = document.querySelector(".game-win-modal-wrapper"),
    gameWinCloseButton = document.querySelector(".game-win-modal__close-button");
var countCells = gameField.dataset.countcells,
    countRows = +Math.sqrt(countCells),
    emptyCellIndex = +countCells,
    moves = 0;

var createCells = function createCells() {
  for (var _e = 1; _e < countCells; ++_e) {
    var t = document.createElement("li");
    t.classList.add("game-field__cell"), t.dataset.index = _e, t.style.flexBasis = 100 / countRows + "%", t.innerHTML = _e, gameField.appendChild(t);
  }

  var e = document.createElement("li");
  e.classList.add("game-field__cell"), e.dataset.index = countCells, e.style.flexBasis = 100 / countRows + "%", gameField.appendChild(e);
},
    removeCells = function removeCells() {
  gameField.innerHTML = "";
},
    switchStates = function switchStates(e, t) {
  var l = gameField.querySelector(".game-field__cell:nth-child(".concat(e, ")")),
      n = gameField.querySelector(".game-field__cell:nth-child(".concat(t, ")")),
      a = l.innerHTML,
      s = n.innerHTML;
  l.innerHTML = s, n.innerHTML = a;
},
    isAdjacentCell = function isAdjacentCell(e) {
  if (e < 1 || e > countCells) return !1;
  var t = !0,
      l = !0,
      n = !0,
      a = !0;
  return e % countRows == 1 && (n = !1), e % countRows == 0 && (a = !1), e / countRows <= 1 && (t = !1), e / countRows > countRows - 1 && (l = !1), !(!n || emptyCellIndex !== e - 1) || !(!a || emptyCellIndex !== e + 1) || !(!t || emptyCellIndex !== e - countRows) || !(!l || emptyCellIndex !== e + countRows);
},
    closeGameFieldSize = function closeGameFieldSize() {
  gameFieldSizeWrapper.classList.add("hidden");
},
    openGameFieldSize = function openGameFieldSize() {
  gameFieldSizeWrapper.classList.remove("hidden");
},
    openGame = function openGame() {
  document.querySelector(".game-wrapper").classList.remove("hidden");
},
    closeGame = function closeGame() {
  document.querySelector(".game-wrapper").classList.add("hidden");
},
    changeFieldSize = function changeFieldSize(e) {
  gameField.dataset.countcells = e;
},
    updateChanges = function updateChanges() {
  countCells = gameField.dataset.countcells, countRows = +Math.sqrt(countCells), emptyCellIndex = +countCells;
},
    resetCountMoves = function resetCountMoves() {
  countMoves.innerHTML = "-", moves = 0;
},
    updateCountMoves = function updateCountMoves() {
  moves++, countMoves.innerHTML = "" + moves;
},
    getRandomNumberFrom1to4 = function getRandomNumberFrom1to4() {
  return Math.ceil(4 * Math.random());
},
    getIndexOfCellByDirection = function getIndexOfCellByDirection(e) {
  var t = emptyCellIndex;

  switch (e) {
    case 1:
      t -= countRows;
      break;

    case 2:
      t++;
      break;

    case 3:
      t += countRows;
      break;

    case 4:
      t--;
  }

  return t;
},
    gameShuffle = function gameShuffle() {
  for (var e = 0; e <= 47; ++e) {
    var _e2 = Math.ceil(4 * Math.random()),
        t = getIndexOfCellByDirection(_e2);

    isAdjacentCell(t) && (switchStates(emptyCellIndex, t), emptyCellIndex = t);
  }
},
    openGameWinModal = function openGameWinModal() {
  gameWinModalWrapper.classList.remove("hidden");
},
    closeGameWinModal = function closeGameWinModal() {
  gameWinModalWrapper.classList.add("hidden");
},
    updateGameWinInfo = function updateGameWinInfo() {
  document.querySelector(".game-win-modal__score").innerHTML = "" + moves;
},
    isGameWin = function isGameWin() {
  var e = gameField.querySelectorAll(".game-field__cell");

  for (var t = 0; t < countCells - 1; ++t) {
    if (+e[t].innerHTML != t + 1) return !1;
  }

  return !0;
};

gameField.addEventListener("click", function (e) {
  var t = e.target,
      l = t.innerHTML;

  if (t.classList.contains("game-field__cell") && "" != l) {
    var _e3 = +t.dataset.index;

    isAdjacentCell(_e3) && (moves++, countMoves.innerHTML = "" + moves, switchStates(_e3, emptyCellIndex), emptyCellIndex = _e3), isGameWin() && (closeGame(), document.querySelector(".game-win-modal__score").innerHTML = "" + moves, gameWinModalWrapper.classList.remove("hidden"));
  }
}), gameFieldSizeButtons.forEach(function (e) {
  e.addEventListener("click", function (e) {
    var t = e.target.dataset.size;
    var l;
    gameFieldSizeWrapper.classList.add("hidden"), openGame(), l = t, gameField.dataset.countcells = l, countCells = gameField.dataset.countcells, countRows = +Math.sqrt(countCells), emptyCellIndex = +countCells, createCells(), resetCountMoves(), gameShuffle();
  });
}), gameRestart.addEventListener("click", function () {
  resetCountMoves(), gameShuffle();
}), gameMenu.addEventListener("click", function () {
  closeGame(), gameField.innerHTML = "", gameFieldSizeWrapper.classList.remove("hidden");
}), gameWinCloseButton.addEventListener("click", function () {
  gameWinModalWrapper.classList.add("hidden"), resetCountMoves(), gameShuffle(), openGame();
});